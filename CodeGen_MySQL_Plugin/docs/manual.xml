<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
          "../../phpdoc/dtds/dbxml-4.1.2/docbookx.dtd" [
]>
	 
<book>
 <title><literal>CodeGen_MySQL_Plugin</literal> - the MySQL Plugin code generator</title>

 <chapter>
  <title>Introduction</title>
  <section>
   <title>What is it?</title>
   <para>
    <literal>CodeGen_MySQL_Plugin</literal> is a tool that can automatically 
    create the basic framework for MySQL plugin libraries from a rather simple XML 
    specification file. The actual functionality is provided
    by the script <filename>mysql-plugin-gen</filename> that is installed by 
	the <literal>CodeGen_MySQL_Plugin</literal> package.
   </para>
   <para>
    The code generated by <filename>mysql-plugin-gen</filename> is currently 
    designed to work with the most current MySQL 5.1 beta release only.
    Once MySQL 5.1 becomes GA and the plugin API stabelizes the generated
    code will compile wih all 5.1 GA releases and future releases 
    (although it may be necessary to recompile it for a specific server
    version to load and run).
   </para>
  </section>

  <section>
   <title>Features</title>
   <para>
    <literal>mysql-plugin-gen</literal> tries to support as many plugin 
    writing aspects as possible. This currently includes code generation 
    for fulltext parser plugins and preparation of 
	<filename>configure</filename> and <filename>Makefile</filename> 
	related build files.
   </para>
   <para>
    Support for pluggable storage engines is currently being worked on
    and user defined functions and other plugin types will be added 
    when these plugin types are supported by the MySQL server.
   </para>
  </section>

  <section>
   <title>Installation</title>
   <para>
	<literal>CodeGen_MySQL_Plugin</literal> is available in PEAR, the
    PHP Extension and Application Repository, on <literal>http://pear.php.net/</literal>.
   </para>

   <section>
    <title>Online installation</title>
    <para>
     Online installation using the PEAR installer is the easiest way 
     to install <literal>CodeGen_MySQL_Plugin</literal>, just issue the 
	 following command:
    </para>
    <programlisting>
pear install -o CodeGen_MySQL_Plugin
    </programlisting>
    <para>
     The PEAR installer will download and install the package itself
     and all packages that it depends on.
    </para>
   </section>

   <section>
    <title>Installing from package files</title>
    <para>
     When installing from package files downloaded from <literal>pear.php.net</literal>
     you have to resolve dependencies yourself. Currently <literal>CodeGen_PECL</literal>
     depends on two other PEAR packages: <literal>Console_Getopt</literal>, which is part
     of the PEAR base installation, <literal>CodeGen</literal>, the code generator
     base package, and <literal>CodeGen_MySQL</literal>, the base package for MySQL 
     specific code generators. You need to download all three packages for installation.
	 The actual installation is once again performed by the PEAR installer:
    </para>
    <programlisting>
pear install CogeGen-0.9.0.tgz
pear install CogeGen_MySQL-0.9.0.tgz
pear install CogeGen_MySQL-Plugin-0.9.0.tgz
    </programlisting>
   </section>

   <section>
    <title>Installing from PEAR CVS</title>
    <para>
     You can also install CodeGen_MySQL_Plugin snapshots from PEAR CVS. CVS snapshots may
     include features not yet available in any release package, but the code in
     CVS may not be as well tested as the release packages (or even broken at 
     times). Be warned, your milage may vary. Use the following sequence of 
     commands in your PEAR CVS checkout to install the latest
     <literal>CodeGen_MySQL_Plugin</literal> snapshot:
    </para>
    <programlisting>
cd pear
cd CodeGen
cvs update
pear install -f package.xml
cd ..
cd CodeGen_MySQL
cvs update
pear install -f package.xml
cd ..
cd CodeGen_MySQL_Plugin
cvs update
pear install -f package.xml
cd ..
    </programlisting>
   </section>
  </section>

  <section>
   <title>How to use it</title>
   <para>
    Given that you already have written your XML specs file invoking 
    <command>mysql-plugin-gen</command> is as simple as:
    <screen>mysql-plugin-gen specfile.xml</screen>
   </para>
   <para>
    <command>mysql-plugin-gen</command> will parse the specs file, create a new
    subdirectory and puts all generated files in there. The generated
    code is ready to be compiled using the usual
    <screen>configure [--with-mysql=...]; make</screen>
    sequence.
   </para>
   <para>
    Below you find a hardcopy of <literal>udf-gen --help</literal> output:
   </para>
   <screen>
<![CDATA[
mysql-plugin-gen 0.1.0dev, Copyright (c) 2006, 2007 Hartmut Holzgraefe

Usage:

/usr/local/bin/mysql-plugin-gen [-hxfl] [-d dir] [--version] specfile.xml

  -h|--help          this message
  -x|--experimental  enable experimental features
  -d|--dir           output directory
  -f|--force         overwrite existing files/directories
  -l|--lint          check syntax only, don't create output
  --version          show version info

]]>
   </screen>
  </section>
 </chapter>

  <chapter>
  <title>The XML description</title>
  
  <section>
   <title>Basics</title>
   <para>
    The top level container tag describing a plugin library is the
    <literal>&lt;plugin&gt;</literal> tag. The name of the plugin
    is given in the <literal>name=...</literal> attribute. The plugin library
    name has to be a valid file name as it is used the extensions
    directory name. 
   </para>
   <para>
	You can specify which CodeGen_MySQL_Plugin version your specification file
    was build for using the <literal>version=...</literal> attribute.
    The <command>mysql-plugin-gen</command> command will not accept specifications
    written for a newer version of CodeGen_MySQL_Plugin than the one installed.
    If the requested version is older then the current one then 
    <command>mysql-plugin-gen</command> will try to fall back to the older versions 
    behavior for features that have changed in incompatible ways.
   </para>
   <note>
    <para>
     So far no such changes have happened.
    </para>
   </note>
   <para>
    The tags <literal>&lt;summary&gt;</literal> and
    <literal>&lt;description&gt;</literal> should be added at the very top of
    your plugins. The summary should be a short one-line
    description of the plugin library  while the actually description can be
    as detailed as you like.
   </para>
      <example>
    <title>Plugin basics</title>
    <programlisting role="xml">
<![CDATA[
<plugin name="sample" version="0.1.0">
 <summary>A sample plugin library</summary>
 <description>
  This is a sample plugin specification
  showing how to use CodeGen_MySQL_Plugin for
  plugin library generation.
 </description>
 ...
]]>
    </programlisting>
   </example>
  </section>


  <section>
   <title>Release information</title>
   <para>
    The release information for your plugin library should include the
    plugin authors and maintainers, the version number, state and
    release date, the chosen license and maybe a change log describing
    previous releases. 
   </para>
   <para>
    The <literal>&lt;maintainers&gt;</literal>, <literal>&lt;release&gt;</literal> and
    <literal>&lt;changelog&gt;</literal> tags specifications are identical to  
    those in the PEAR <literal>package.xml</literal> specification so 
    please refer to the PEAR documentation here.
   </para>
   <example>
    <title>Release information</title>
    <programlisting>
<![CDATA[
...
  <maintainers>
    <maintainer>
      <user>hholzgra</user>
      <name>Hartmut Holzgraefe</name>
      <email>hartmut@php.net</email>
      <role>lead</role>
    </maintainer>
  </maintainers>

  <release>
    <version>1.0</version>
    <date>2002-07-09</date>
    <state>stable</state>
    <notes>
     The sample plugin library is now stable
    </notes>
  </release>

  <changelog>
    <release>
      <version>0.5</version>
      <date>2002-07-05</date>
      <state>beta</state>
      <notes>First beta version</notes>
    <release>
    <release>
      <version>0.1</version>
      <date>2002-07-01</date>
      <state>alpha</state>
      <notes>First alpha version</notes>
    <release>
  </changelog>
...
]]>
    </programlisting>
   </example>
   <para>
    The <literal>&lt;license&gt;</literal> tag is a little more restrictive as
    its <literal>package.xml</literal> counterpart as it is used to
    decide which license text should actually be written to the
    <literal>LICENSE</literal>. For now you have to specify either
    <literal>GPL</literal> or
    <literal>BSD</literal>, any other value is taken as
    '<emphasis>proprietary</emphasis>'.
   </para>
   <example>
    <title>License</title>
    <programlisting role="xml">
<![CDATA[
...
  <license>GPL</license>
...
]]>
    </programlisting>
   </example>
  </section>

 </chapter>

</book>