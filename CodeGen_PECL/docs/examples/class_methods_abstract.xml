<?xml version="1.0" ?>
<!DOCTYPE extension SYSTEM "../extension.dtd">
<extension name="class_methods_abstract" version="1.0.0">

 <class name="class1"/>

 <class name="class2">
  <function name="foo" access="public" abstract="yes">
   <proto>int foo(object class1 c1, object class1 c2)</proto>
  </function>
 </class>

 <test>
  <code>
$c = new class2;
  </code>
  <result mode="format">
Fatal error: Cannot instantiate abstract class class2 in %s on line %d
  </result>
 </test>	


 <tests>
  <test>
   <code>
    <?data
class test1 extends class2 
{ 
}
    ?>
   </code>
   <result mode="format">
Fatal error: Class test1 contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (class2::foo) in %s on line %d
   </result>
  </test>

  <test>
   <code>
    <?data
class test2 extends class2
{
  function foo($c1, $c2) 
  {
  }
}
    ?>
   </code>
   <result mode="format">
Fatal error: Declaration of test2::foo() must be compatible with that of class2::foo() in %s on line %d
   </result>
  </test>

  <test>
   <code>
    <?data
class test3 extends class2
{
  function foo(class1 $c1, class1 $c2) 
  {
  }
}

echo "OK";
    ?>
   </code>
  </test>
 </tests>

</extension>
